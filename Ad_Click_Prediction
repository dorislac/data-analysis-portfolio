{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9339481,"sourceType":"datasetVersion","datasetId":5659619}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/dorislacassagne/ad-click-prediction?scriptVersionId=228104899\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# **Import libraries and dataset**","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport shap\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, log_loss, confusion_matrix\nfrom sklearn.inspection import PartialDependenceDisplay\nimport warnings\nimport time\nwarnings.filterwarnings(\"ignore\")","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:52:59.758032Z","iopub.execute_input":"2025-03-17T15:52:59.758445Z","iopub.status.idle":"2025-03-17T15:52:59.765362Z","shell.execute_reply.started":"2025-03-17T15:52:59.758402Z","shell.execute_reply":"2025-03-17T15:52:59.764291Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df = pd.read_csv(\"/kaggle/input/ad-click-prediction-dataset/ad_click_dataset.csv\")\ncolors = plt.get_cmap(\"Pastel1\").colors","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:52:59.766513Z","iopub.execute_input":"2025-03-17T15:52:59.766837Z","iopub.status.idle":"2025-03-17T15:52:59.803239Z","shell.execute_reply.started":"2025-03-17T15:52:59.766811Z","shell.execute_reply":"2025-03-17T15:52:59.802205Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **Preprocessing**","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:52:59.805108Z","iopub.execute_input":"2025-03-17T15:52:59.805467Z","iopub.status.idle":"2025-03-17T15:52:59.818267Z","shell.execute_reply.started":"2025-03-17T15:52:59.805425Z","shell.execute_reply":"2025-03-17T15:52:59.817258Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:52:59.819849Z","iopub.execute_input":"2025-03-17T15:52:59.820181Z","iopub.status.idle":"2025-03-17T15:52:59.84189Z","shell.execute_reply.started":"2025-03-17T15:52:59.820156Z","shell.execute_reply":"2025-03-17T15:52:59.840582Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:52:59.842875Z","iopub.execute_input":"2025-03-17T15:52:59.843236Z","iopub.status.idle":"2025-03-17T15:52:59.864465Z","shell.execute_reply.started":"2025-03-17T15:52:59.843205Z","shell.execute_reply":"2025-03-17T15:52:59.863338Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##  **Dealing with missing values**\nSome users have repeated data (multiple lines of data), so we can use their previous demographic information to complete their missing demographic data.","metadata":{}},{"cell_type":"code","source":"#Replace missing values for \"gender\",\"age\" and \"device_type\" with the most frequent value for the corresponding id\ndf[\"gender\"] = df.groupby(\"id\")[\"gender\"].transform(lambda x: x.ffill().bfill())\ndf[\"age\"] = df.groupby(\"id\")[\"age\"].transform(lambda x: x.ffill().bfill())\ndf[\"device_type\"] = df.groupby(\"id\")[\"device_type\"].transform(lambda x: x.ffill().bfill())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:52:59.865444Z","iopub.execute_input":"2025-03-17T15:52:59.865712Z","iopub.status.idle":"2025-03-17T15:53:03.786247Z","shell.execute_reply.started":"2025-03-17T15:52:59.865687Z","shell.execute_reply":"2025-03-17T15:53:03.785374Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Next, we can complete the treatment of numerical missing data by replacing the NA with the average age.\n\nFinally, for categorical variables, I choose to transform them into a separate factor named \"unknown\".","metadata":{}},{"cell_type":"code","source":"age_imputer = SimpleImputer(strategy='mean')\ndf['age'] = age_imputer.fit_transform(df[['age']])\n\ncategorical_cols = ['gender', 'device_type', 'ad_position', 'browsing_history', 'time_of_day']\ndf[categorical_cols] = df[categorical_cols].fillna('Unknown')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:03.787185Z","iopub.execute_input":"2025-03-17T15:53:03.78744Z","iopub.status.idle":"2025-03-17T15:53:03.805165Z","shell.execute_reply.started":"2025-03-17T15:53:03.787419Z","shell.execute_reply":"2025-03-17T15:53:03.804076Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Check if all NA have been treated\ndf.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:03.806224Z","iopub.execute_input":"2025-03-17T15:53:03.806591Z","iopub.status.idle":"2025-03-17T15:53:03.819099Z","shell.execute_reply.started":"2025-03-17T15:53:03.806556Z","shell.execute_reply":"2025-03-17T15:53:03.818093Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"##  Descriptives","metadata":{}},{"cell_type":"code","source":"# Delete duplicated demographics, keeping only one line per id\ndf_unique = df.drop_duplicates(subset=[\"id\",\"gender\",\"device_type\", \"age\"])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:03.821823Z","iopub.execute_input":"2025-03-17T15:53:03.822129Z","iopub.status.idle":"2025-03-17T15:53:03.838856Z","shell.execute_reply.started":"2025-03-17T15:53:03.822101Z","shell.execute_reply":"2025-03-17T15:53:03.837747Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a figure with a grid of 1 row and 3 columns\nplt.figure(figsize=(18, 6))\n\n# First graph: Distribution of devices\nplt.subplot(1, 3, 1)\ndevice = df_unique[\"device_type\"].value_counts()\nplt.bar(device.index, device.values, color=colors[:len(device)])\nplt.xlabel(\"Device\")\nplt.ylabel(\"Number of individuals\")\nplt.title(\"Device distribution\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Second graph: Gender distribution\nplt.subplot(1, 3, 2)\ngender_counts = df_unique[\"gender\"].value_counts()\nplt.bar(gender_counts.index, gender_counts.values, color=colors[:len(gender_counts)])\nplt.xlabel(\"Gender\")\nplt.ylabel(\"Number of individuals\")\nplt.title(\"Gender distribution\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Third graph: Age distribution (Boxplot)\nplt.subplot(1, 3, 3)\nplt.boxplot(df_unique[\"age\"], vert=True, patch_artist=True, boxprops=dict(facecolor=\"skyblue\"))\nplt.xlabel(\"Age\")\nplt.ylabel(\"Value\")\nplt.title(\"Age distribution\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Display the figure with the three graphs\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:03.840153Z","iopub.execute_input":"2025-03-17T15:53:03.840434Z","iopub.status.idle":"2025-03-17T15:53:04.378596Z","shell.execute_reply.started":"2025-03-17T15:53:03.84041Z","shell.execute_reply":"2025-03-17T15:53:04.377395Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Note: the average age (40) is over-represented due to the imputation of missing values for age.","metadata":{}},{"cell_type":"code","source":"# Create a figure with a grid of 1 row and 3 columns\nplt.figure(figsize=(18, 6))\n\n# First graph: Distribution of ad position\nplt.subplot(1, 3, 1)\ndevice = df_unique[\"ad_position\"].value_counts()\nplt.bar(device.index, device.values, color=colors[:len(device)])\nplt.xlabel(\"Ad position\")\nplt.ylabel(\"Count\")\nplt.title(\"ad_position distribution\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Second graph: browsing history distribution\nplt.subplot(1, 3, 2)\ngender_counts = df_unique[\"browsing_history\"].value_counts()\nplt.bar(gender_counts.index, gender_counts.values, color=colors[:len(gender_counts)])\nplt.xlabel(\"Browsing history\")\nplt.ylabel(\"Count\")\nplt.title(\"browsing_history distribution\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Third graph: Time of day distribution\nplt.subplot(1, 3, 3)\ngender_counts = df_unique[\"time_of_day\"].value_counts()\nplt.bar(gender_counts.index, gender_counts.values, color=colors[:len(gender_counts)])\nplt.xlabel(\"Time of day\")\nplt.ylabel(\"Count\")\nplt.title(\"time_of_day distribution\")\nplt.grid(axis='y', linestyle='--', alpha=0.7)\n\n# Display the figure with the three graphs\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:04.379526Z","iopub.execute_input":"2025-03-17T15:53:04.379802Z","iopub.status.idle":"2025-03-17T15:53:05.034394Z","shell.execute_reply.started":"2025-03-17T15:53:04.379778Z","shell.execute_reply":"2025-03-17T15:53:05.03354Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# **MODELING**","metadata":{}},{"cell_type":"code","source":"# Separate features and target\nX = df.drop(columns=['click', 'id', 'full_name'])\ny = df['click']\n\n# Encoding categorical variables\nencoder = OneHotEncoder(drop='first', sparse_output=False)\nX_categorical = X.select_dtypes(include=['object'])\nX_encoded = encoder.fit_transform(X_categorical)\n\n# Retrieve the names of encoded variables\nencoded_feature_names = encoder.get_feature_names_out(input_features=X_categorical.columns)\n\n# Standardise numerical variables\nscaler = StandardScaler()\nX_numerical = X.select_dtypes(include=['number'])\nX_scaled = scaler.fit_transform(X_numerical)\n\n# Concatenate all variables and recreate a DataFrame\nX_final = np.hstack([X_scaled, X_encoded])\nfeature_names = list(X_numerical.columns) + list(encoded_feature_names)\nX_final_df = pd.DataFrame(X_final, columns=feature_names)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.035232Z","iopub.execute_input":"2025-03-17T15:53:05.035651Z","iopub.status.idle":"2025-03-17T15:53:05.081068Z","shell.execute_reply.started":"2025-03-17T15:53:05.035615Z","shell.execute_reply":"2025-03-17T15:53:05.080034Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Separate into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X_final_df, y, test_size=0.2, random_state=42)\n\nX_train = X_train.reset_index(drop=True)\ny_train = y_train.reset_index(drop=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.082053Z","iopub.execute_input":"2025-03-17T15:53:05.082419Z","iopub.status.idle":"2025-03-17T15:53:05.092752Z","shell.execute_reply.started":"2025-03-17T15:53:05.082383Z","shell.execute_reply":"2025-03-17T15:53:05.091402Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"***1. Logistic Regression***","metadata":{}},{"cell_type":"code","source":"# Training a Linear Regression Model\nLR = LogisticRegression().fit(X_train,y_train)\nyhat = LR.predict(X_test)\nyhat_prob = LR.predict_proba(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.093818Z","iopub.execute_input":"2025-03-17T15:53:05.094193Z","iopub.status.idle":"2025-03-17T15:53:05.149616Z","shell.execute_reply.started":"2025-03-17T15:53:05.094156Z","shell.execute_reply":"2025-03-17T15:53:05.148695Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Evaluate the model\nprint(\"Accuracy:\", accuracy_score(y_test, yhat))\nprint(\"Classification Report:\\n\", classification_report(y_test, yhat))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.150425Z","iopub.execute_input":"2025-03-17T15:53:05.150697Z","iopub.status.idle":"2025-03-17T15:53:05.173413Z","shell.execute_reply.started":"2025-03-17T15:53:05.150674Z","shell.execute_reply":"2025-03-17T15:53:05.172157Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"log_loss(y_test, yhat_prob)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.174777Z","iopub.execute_input":"2025-03-17T15:53:05.175209Z","iopub.status.idle":"2025-03-17T15:53:05.18699Z","shell.execute_reply.started":"2025-03-17T15:53:05.175168Z","shell.execute_reply":"2025-03-17T15:53:05.185692Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"coefficients = pd.Series(LR.coef_[0], index=X_final_df.columns)\ncoefficients.sort_values().plot(kind='barh')\nplt.title(\"Feature Coefficients in Logistic Regression CLick Model\")\nplt.xlabel(\"Coefficient Value\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.188152Z","iopub.execute_input":"2025-03-17T15:53:05.188786Z","iopub.status.idle":"2025-03-17T15:53:05.498989Z","shell.execute_reply.started":"2025-03-17T15:53:05.188741Z","shell.execute_reply":"2025-03-17T15:53:05.498014Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculation of the confusion matrix\nconf_matrix = confusion_matrix(y_test, yhat)\n\nplt.figure(figsize=(5, 5))\nplt.matshow(conf_matrix, cmap=\"Blues\", fignum=1)  # Affichage de la matrice\nfor i in range(conf_matrix.shape[0]):\n    for j in range(conf_matrix.shape[1]):\n        plt.text(j, i, str(conf_matrix[i, j]), ha=\"center\", va=\"center\", color=\"black\", fontsize=12)\nplt.xlabel(\"Predictions\", fontsize=12)\nplt.ylabel(\"Real Truths\", fontsize=12)\nplt.title(\"Confusion Matrix\", fontsize=14)\nplt.xticks([0, 1], [\"No-click\", \"click\"])\nplt.yticks([0, 1], [\"No-click\", \"click\"])\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.500043Z","iopub.execute_input":"2025-03-17T15:53:05.500321Z","iopub.status.idle":"2025-03-17T15:53:05.648625Z","shell.execute_reply.started":"2025-03-17T15:53:05.500297Z","shell.execute_reply":"2025-03-17T15:53:05.647461Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"***2. Random Forest***","metadata":{}},{"cell_type":"code","source":"# Training a Random Forest model\nrf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight=\"balanced\")\n\n# Measure training time for Random Forest\nstart_time_rf = time.time()\nrf.fit(X_train, y_train)\nend_time_rf = time.time()\nrf_train_time = end_time_rf - start_time_rf\n\n# Predictions\nstart_time_rf = time.time()\ny_pred_rf = rf.predict(X_test)\nend_time_rf = time.time()\nrf_pred_time = end_time_rf - start_time_rf\n\n# Evaluate the model\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_rf))\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred_rf))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:05.649755Z","iopub.execute_input":"2025-03-17T15:53:05.650137Z","iopub.status.idle":"2025-03-17T15:53:06.374218Z","shell.execute_reply.started":"2025-03-17T15:53:05.6501Z","shell.execute_reply":"2025-03-17T15:53:06.373184Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Calculation of the confusion matrix\nconf_matrix = confusion_matrix(y_test, y_pred_rf)\n\nplt.figure(figsize=(5, 5))\nplt.matshow(conf_matrix, cmap=\"Blues\", fignum=1)  # Affichage de la matrice\nfor i in range(conf_matrix.shape[0]):\n    for j in range(conf_matrix.shape[1]):\n        plt.text(j, i, str(conf_matrix[i, j]), ha=\"center\", va=\"center\", color=\"black\", fontsize=12)\nplt.xlabel(\"Predictions\", fontsize=12)\nplt.ylabel(\"Real Truths\", fontsize=12)\nplt.title(\"Confusion Matrix\", fontsize=14)\nplt.xticks([0, 1], [\"No-click\", \"click\"])\nplt.yticks([0, 1], [\"No-click\", \"click\"])\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:06.375205Z","iopub.execute_input":"2025-03-17T15:53:06.375539Z","iopub.status.idle":"2025-03-17T15:53:06.517509Z","shell.execute_reply.started":"2025-03-17T15:53:06.375512Z","shell.execute_reply":"2025-03-17T15:53:06.516412Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Importance of variables\nfeature_names = X_final_df.columns\nfeature_importances = rf.feature_importances_\n\nsorted_idx = np.argsort(feature_importances)\nplt.figure(figsize=(10, 6))\nplt.barh(np.array(feature_names)[sorted_idx], feature_importances[sorted_idx])\nplt.ylabel(\"Variables\")\nplt.xlabel(\"Importance\")\nplt.title(\"Importance of variables in predicting clicks\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-17T15:53:06.518543Z","iopub.execute_input":"2025-03-17T15:53:06.518864Z","iopub.status.idle":"2025-03-17T15:53:06.83856Z","shell.execute_reply.started":"2025-03-17T15:53:06.518829Z","shell.execute_reply":"2025-03-17T15:53:06.83751Z"}},"outputs":[],"execution_count":null}]}